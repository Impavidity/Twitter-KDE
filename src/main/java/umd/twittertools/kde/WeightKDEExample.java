package umd.twittertools.kde;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Random;

import umontreal.iro.lecuyer.gof.KernelDensity;
import umontreal.iro.lecuyer.probdist.EmpiricalDist;
import umontreal.iro.lecuyer.probdist.NormalDist;

public class WeightKDEExample {
	
	private final static int LENGTH = 100;
	private static Random random = new Random();
	private static double points[] = new double[LENGTH];
	private static double weights[] = new double[LENGTH];
	
	public static void main(String[] args) throws IOException {
		// Points are random generated by Normal Gaussian Distribution
		// Each point is assigned a weight in the range of [0, 1]
		int i = 0;
		String line;
		BufferedReader br = new BufferedReader(new FileReader("points.txt"));
		while((line = br.readLine()) != null) {
			String groups[] = line.split(" ");
			points[i] = Double.parseDouble(groups[0]);
			weights[i] = Double.parseDouble(groups[1]);
			i++;
		}
		
		// Weighted Kernel Density Estimates
		Data data = new Data(points, weights);
		data.computeStatistics();
		NormalDist kernel = new NormalDist();
		double[] estimateValues = WeightKDE.computeDensity(data, kernel, points); 
		for (double value: estimateValues) {
			System.out.println(value);
		}
	}

}
